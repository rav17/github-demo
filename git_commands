clone repository :
---------------------------------------
git clone https://github.com/rav17/github-demo.git

check the status of the repositoy :
------------------------------------
git status


Types of Areas in Local Repository:
-------------------------------------
working directory  --(git add <filename>)--> staging directory --(git commit -m <<commit comment>>)--> local git repository --(git push origin master)---> remote repository

Setting global configuration in git :
-------------------------------------------------
# setting email address:
git config --global user.email "<<git user's email address>>"

#setting email username :
git config --global user.name <<git username>>

#setting text editor for linux :
git config --global core.editor "brackets"


creating a new git repository locally:
---------------------------------------------

git init <<project/repo-name>>


how to identify whether a project/folder is a git repository ?
--------------------------------------------------------------------

do ls -latr once you are inside the folder and check of (.git) folder.

#example

 ⚡ ⚙ root@192-168-1-111  ~neo/devops_learning/git_tutorials/git_practicesZone/first_project > ls -latr
 
 total 0
drwxr-xr-x. 5 root root 115 Apr 19 19:54 ..
-rw-r--r--. 1 root root   0 Apr 19 19:56 beermeup.txt
drwxr-xr-x. 3 root root  38 Apr 19 19:56 .
drwxr-xr-x. 8 root root 166 Apr 19 20:09 .git

so, first_project is the git repository.


Forking in git :
---------------------------------------------------------------

A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project. Most commonly, forks are used to either propose changes to someone else's project or to use someone else's project as a starting point for your own idea.


more detailed explanation  : https://guides.github.com/activities/forking/


staging and comitting the "tracked" files in single command :
----------------------------------------------------------------

git commit -am "write you comments with in quotes"

#note that below command will work only for those files which are tracked by the git.


example :

1. modify an already tracked file (here we are modifying aleady tracked file "git_command")

✘ ⚡ ⚙ root@192-168-1-111  ~neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master git status
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   git_commands
#
no changes added to commit (use "git add" and/or "git commit -a")


2. create a new sample.txt file which will be not tracked by git :

⚡ ⚙ root@192-168-1-111  ~neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●  touch sample.txt  
 ⚡ ⚙ root@192-168-1-111  ~neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●  git status
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   git_commands
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	sample.txt
no changes added to commit (use "git add" and/or "git commit -a")

3. fire the command which will stage and commit the already tracked file in git :

⚡ ⚙ root@192-168-1-111  ~neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●  git commit -am "testing of -am files"     "
[master 1b643a6] testing of -am files
 1 file changed, 3 insertions(+)

4. check the git status :

# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#   (use "git push" to publish your local commits)
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	sample.txt
nothing added to commit but untracked files present (use "git add" to track)

## you can see in the above output that untracked file "sample.txt" was not staged and commit by the "git commit -am" command.




how git track the changes of the files ?
-------------------------------------------------------------

#git smartly track the changes made to a file, its smart enof to inform you the changes in a files that are staged for commit and changes that are #yet to be staged.
#in the below examples, we can clearly see that git has cleverly identify the two changes in the git_commands file.
  1. changes that are staged but not yet committed.
  2. changes that are yet to be staged.
  
⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●✚  git status
# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#   (use "git push" to publish your local commits)
#
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	modified:   git_commands
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   git_commands
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	sample.txt



#sample.txt file, is a file that is not yet tracked by the git. in order to get sample.txt file tracked by git use following command :

git add <<sample.txt>>

 ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●✚  git add sample.txt  
 ⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●✚  git status        
# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#   (use "git push" to publish your local commits)
#
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	modified:   git_commands
#	new file:   sample.txt
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   git_commands


Recursively add files to staging area :
----------------------------------------------------------------

git add . #will add file recursively to staging aread.



back out changes in the git repository :
-----------------------------------------------------------------


1. add line in README.md

⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ✚  cat README.md
# github-demo
Demo repository for demo purpose
this line is for demo to show what happen if changes are backout from git.#  


2. add the changes of README.me files to staging area.


⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●✚  git add README.md        
 ⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ✚  git status       
# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#   (use "git push" to publish your local commits)
#
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	modified:   README.md
#	modified:   git_commands
#	new file:   sample.txt


3.  use the git reset HEAD <file> command to unstage the changes of the file :



 ⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●✚  git reset HEAD README.md
Unstaged changes after reset:
M	README.md


4. perform git status to ensure that file README.md is move to  working directory (not in staging AREA)


⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●✚  git status              
# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#   (use "git push" to publish your local commits)
#
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	modified:   git_commands
#	new file:   sample.txt
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   README.md



5. git reset HEAD <file> command, only move the file from staging aread to working directory. it doesn't change the content.


⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●✚  cat README.md
# github-demo
Demo repository for demo purpose
this line is for demo to show what happen if changes are backout from git.#           

6. git checkout -- <<fileName>>, will get the file to its originla state (removing all the staged chnages..)


⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●✚  git checkout -- README.md
 ⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ✚  git status               
# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#   (use "git push" to publish your local commits)
#
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	modified:   git_commands
#	new file:   sample.txt
#


7. check the content of the file after running git checkout --- README.md

 
⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ✚  cat README.md
# github-demo
Demo repository for demo purpose



##NOTE : git checkout --- will only remove the staged changes. it doesnot have the capability to remove the commit changes..


Example :

1. add a line to the README.md file and do git status

⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●  git status               
# On branch master
# Your branch is ahead of 'origin/master' by 3 commits.
#   (use "git push" to publish your local commits)
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   README.md
#	modified:   git_commands
#
no changes added to commit (use "git add" and/or "git commit -a")

2. push the file README.md to staging Area :

⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●  git add README.md
 ⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●✚  git status       
# On branch master
# Your branch is ahead of 'origin/master' by 3 commits.
#   (use "git push" to publish your local commits)
#
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	modified:   README.md
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   git_commands
#


3.  check the content of the README.md file . it should have new added line

 ⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●  cat README.md
# github-demo
Demo repository for demo purpose
this line is for demo to show what happen if changes are backout from git.
this line is for demo to show what happen if changes are backout from git.
this line is for demo to show what happen if changes are backout from git.

#above last line is newly added in the file.


4. commit the changes and check the git status :

 ⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●✚  git commit -m  "committing changes to README.md"
[master af6f348] committing changes to README.md
 1 file changed, 1 insertion(+)
 ⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●  git status
# On branch master
# Your branch is ahead of 'origin/master' by 4 commits.
#   (use "git push" to publish your local commits)
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   git_commands
#
no changes added to commit (use "git add" and/or "git commit -a")


5. do git RESET HEAD <<filename>> command and chck the git status :


 ⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●  git reset HEAD README.md
Unstaged changes after reset:
M	git_commands
 ⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●  git status              
# On branch master
# Your branch is ahead of 'origin/master' by 4 commits.
#   (use "git push" to publish your local commits)
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   git_commands
#
no changes added to commit (use "git add" and/or "git commit -a")



6. perform the git checkout and do git status and check the content of the file : 




 ⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●  git ceckout -- README.mdd
 ⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●  git checkout -- README.md
 ⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●  git status               
# On branch master
# Your branch is ahead of 'origin/master' by 4 commits.
#   (use "git push" to publish your local commits)
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   git_commands
#
no changes added to commit (use "git add" and/or "git commit -a")
 ⚡ ⚙ root@192-168-1-111  /home/neo/devops_learning/git_tutorials/git_practicesZone/github-demo   master ●  cat README.md
# github-demo
Demo repository for demo purpose
this line is for demo to show what happen if changes are backout from git.
this line is for demo to show what happen if changes are backout from git.
this line is for demo to show what happen if changes are backout from git.


#we can see that once the file chnages are commited we cannot put the file its original state using git RESET HEAD and git checkout --- command.






